"use strict";

var primeFactor = {
  calculate: function calculate(num) {
    var result = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];
    var repeat = arguments.length <= 2 || arguments[2] === undefined ? true : arguments[2];

    var root = Math.sqrt(num);
    var x = 2;

    if (num % x) {
      x = 3;
      while (num % x && x < root) {
        x += 2;
      }
    }

    x = x <= root ? x : num;

    if (!repeat) {
      var index = result.indexOf(x);
      if (index < 0) result.push(x);
    } else result.push(x);

    return x === num ? result : this.calculate(num / x, result, repeat);
  },

  getFrequency: function getFrequency(num) {
    var factors = this.calculate(num);
    var count = {};
    var result = [];

    for (var i in factors) {
      if (count.hasOwnProperty(factors[i])) {
        count[factors[i]] += 1;
      } else count[factors[i]] = 1;
    }

    for (var key in count) {
      if ({}.hasOwnProperty.call(count, key)) {
        var obj = {
          factor: Number(key),
          times: count[key]
        };
        result.push(obj);
      }
    }

    return result;
  },

  getUniqueFactors: function getUniqueFactors(num) {
    return this.calculate(num, [], false);
  },

  isPrime: function isPrime(num) {
    var ok = true;
    for (var i = 2; i <= Math.floor(Math.sqrt(num)); i++) {
      if (num % i === 0) {
        ok = false;
        break;
      }
    }

    return ok;
  }
};

module.exports = primeFactor;
